name: Test client

on:
  push:
    branches: [main]
    paths: ["**/*.py", ".github/**"]
  pull_request:
    branches: [main]
    paths: ["**/*.py", ".github/**"]

jobs:
  testing_client:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - serverImage: bastionlab
            client-wheel: client-artifacts
            os: ubuntu-latest
        python-version: [3.9]

    steps:
      - uses: actions/checkout@v2
      ########## SETUP ##########
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      ########### WAIT BUILD CLIENT ##########
      - name: Wait for build of client to finish
        uses: lewagon/wait-on-check-action@v1.2.0
        id: wait-on-check-action-client
        with:
          ref: ${{ github.ref }}
          check-name: "build-client (ubuntu-latest)"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
          check_artifacts: true
          continue-on-error: true
      ########### DOWNLOAD WHEEL CLIENT ##########
      - name: Download artifact client wheel
        id: download-artifact-client
        uses: dawidd6/action-download-artifact@v2
        if: ${{ steps.wait-on-check-action-client.outcome == 'success' }}
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: main.yml
          name: ${{ matrix.client-wheel }}
          workflow_conclusion: success
          path: /tmp
      ########### INSTALL CLIENT WHEEL ##########
      - name: Install client wheel
        id: install-client-wheel
        if: ${{ steps.download-artifact-client.outcome == 'success' }}
        run: |
          python -m pip install /tmp/*.whl
      ######### INSTALL CLIENT FROM SOURCE OTHERWISE ##########
      - name: Install bastionlab client from source
        if: ${{ steps.install-client-wheel.outcome == 'failure' }}
        run: |
          cd client
          make dev-install
          source env/bin/activate

      ########### GET SERVER ##########
      - name: Wait for build of server to finish
        uses: lewagon/wait-on-check-action@v1.2.0
        id: wait-on-check-action-server
        with:
          ref: ${{ github.ref }}
          check-name: "build-server (bastionlab)"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
          check_artifacts: true

      ########### DOWNLOAD SERVER ###########
      - name: Download artifact server
        id: download-artifact-server
        if: ${{ steps.wait-on-check-action-server.outcome == 'success' }}
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: main.yml
          name: ${{ matrix.serverImage }}
          workflow_conclusion: success
          path: /tmp

      ########### LOAD SERVER ###########
      - name: Load image server
        id: load-server
        if: ${{ steps.download-artifact-server.outcome == 'success' }}
        run: |
          docker load --input /tmp/bastionlab.tar
          docker image ls -a

      ###### BUILD SERVER OTHERWISE ######
      - name: Build server image
        id: build-server-no-download
        if: ${{ steps.download-artifact.outcome == 'failure' }}
        run: |
          docker build -t ${{ matrix.serverImage }}:latest -f server/Dockerfile .

      ###### CHECK BASTIONLAB IMAGE IS INSTALLED ######
      - name: Check bastionlab image is installed
        id: check-bastionlab-image
        run: |
          docker image ls -a
          docker image inspect ${{ matrix.serverImage }}:latest

      ###### RUNNING SERVER ######
      - name: Run server
        id: run-server
        if: ${{ steps.check-bastionlab-image.outcome == 'success' }}
        run: |
          docker kill -f app > /dev/null 2>&1 || true
          docker run --rm -d -e BASTIONLAB_DISABLE_TELEMETRY=1 -p 50056:50056  --name app ${{ matrix.serverImage }}:latest

      ########## TESTING CLIENT ##########
      - name: Install dependencies for testing
        if: always()
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 mypy pytest-cov

      - name: Test with pytest
        id: test-client
        if: ${{ steps.check-bastionlab-image.outcome == 'success' }}
        run: pytest --cov --cov-report=xml
        env:
          bastionlab_TEST_NO_LAUNCH_SERVER: "true"
      # Need test to be written in order to work properly

      - name: Pytest Coverage report
        uses: orgoro/coverage@v2
        if: ${{ steps.check-bastionlab-image.outcome == 'success' }}
        with:
          coverageFile: client/coverage.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          retention-days: 5

      - name: Lint with flake8
        if: always()
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

      - name: Check types with mypy
        if: always()
        run: |
          mypy ./client
