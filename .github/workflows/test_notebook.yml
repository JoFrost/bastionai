name: Test notebook

on: [push, pull_request]

jobs:
  testing_notebook:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - serverImage: bastionlab
            clientImage: bastionlab
            client-wheel: client-artifacts
            os: ubuntu-latest
        python-version: [3.9]

    steps:
      - uses: actions/checkout@v2
      ########## SETUP ##########
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # ########### WAIT BUILD CLIENT ##########
      # - name: Wait for build of client to finish
      #   uses: lewagon/wait-on-check-action@v1.2.0
      #   id: wait-on-check-action-client
      #   with:
      #     ref: ${{ github.ref }}
      #     check-name: "build-client (ubuntu-latest)"
      #     repo-token: ${{ secrets.GITHUB_TOKEN }}
      #     wait-interval: 10
      #     check_artifacts: true
      #     continue-on-error: true
      # ########### DOWNLOAD WHEEL CLIENT ##########
      # - name: Download artifact client wheel
      #   id: download-artifact-client
      #   uses: dawidd6/action-download-artifact@v2
      #   if: ${{ steps.wait-on-check-action-client.outcome == 'success' }}
      #   with:
      #     github_token: ${{secrets.GITHUB_TOKEN}}
      #     workflow: main.yml
      #     name: ${{ matrix.client-wheel }}
      #     workflow_conclusion: success
      #     path: /tmp
      # ########### INSTALL CLIENT WHEEL ##########
      # - name: Install client wheel
      #   id: install-client-wheel
      #   if: ${{ steps.download-artifact-client.outcome == 'success' }}
      #   run: |
      #     python -m pip install /tmp/*.whl

      ######### INSTALL CLIENT FROM SOURCE OTHERWISE ##########
      - name: Install bastionlab client from source
        # if: ${{ steps.install-client-wheel.outcome == 'failure' }}
        run: |
          cd client
          make dev-install
          source env/bin/activate

      ########### GET SERVER ##########
      - name: Wait for build of server to finish
        uses: lewagon/wait-on-check-action@v1.2.0
        id: wait-on-check-action-server
        with:
          ref: ${{ github.ref }}
          check-name: "build-server (bastionlab)"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
          check_artifacts: true

      ########### DOWNLOAD SERVER ###########
      - name: Download artifact
        id: download-artifact-server
        if: ${{ steps.wait-on-check-action-server.outcome == 'success' }}
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: main.yml
          name: ${{ matrix.serverImage }}
          workflow_conclusion: success
          path: /tmp

      ########### LOAD SERVER ###########
      - name: Load image
        id: load-server
        if: ${{ steps.download-artifact-server.outcome == 'success' }}
        run: |
          docker load --input /tmp/${{ matrix.serverImage }}.tar
          docker image ls -a

      ###### BUILD SERVER OTHERWISE ######
      - name: Build server
        id: build-server-no-download
        if: ${{ steps.load-server.outcome == 'failure' }}
        run: |
          docker build -t ${{ matrix.serverImage }}:latest -f server/Dockerfile .

      ###### CHECK BASTIONLAB IMAGE IS INSTALLED ######
      - name: Check bastionlab image is installed
        id: check-bastionlab-image
        run: |
          docker image ls -a
          docker image inspect ${{ matrix.serverImage }}:latest

      ########## LAUNCH SERVER ##########
      - name: Launch server
        if: ${{ steps.check-bastionlab-image.outcome == 'success' }}
        run: |
          docker kill -f app > /dev/null 2>&1 || true
          docker run --rm -d -e BASTIONLAB_DISABLE_TELEMETRY=1 -e DISABLE_AUTHENTICATION=1 -p 50056:50056  --name app ${{ matrix.serverImage }}:latest
          
      ########## TESTING NOTEBOOK ##########
      - name: Testing the notebooks
        # Here we convert the notebooks to python scripts and run them
        # In order to avoid running shell commands that we don't want to run
        # we replace the get_ipython().system function by a function that prints whatever
        # For shell commands that we would want to run, we use the % prefix
        run: |
          pip install jupyter nbconvert
          python .github/scripts/remove_cells.py
          wget 'https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv'
          cp titanic.csv converted/train.csv
          cp titanic.csv converted/titanic.csv
          rm ./converted/distilbert_example_notebook.ipynb
          rm ./converted/resnet_example_notebook.ipynb
          for file in ./converted/*.ipynb; do
            jupyter nbconvert --execute --to notebook --inplace --ExecutePreprocessor.timeout=600 --output-dir=./converted $file
          done
