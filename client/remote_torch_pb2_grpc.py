# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import remote_torch_pb2 as remote__torch__pb2


class ReferenceProtocolStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendData = channel.stream_unary(
                '/remote_torch.ReferenceProtocol/SendData',
                request_serializer=remote__torch__pb2.Chunk.SerializeToString,
                response_deserializer=remote__torch__pb2.Reference.FromString,
                )
        self.SendModel = channel.stream_unary(
                '/remote_torch.ReferenceProtocol/SendModel',
                request_serializer=remote__torch__pb2.Chunk.SerializeToString,
                response_deserializer=remote__torch__pb2.Reference.FromString,
                )
        self.Fetch = channel.unary_stream(
                '/remote_torch.ReferenceProtocol/Fetch',
                request_serializer=remote__torch__pb2.Reference.SerializeToString,
                response_deserializer=remote__torch__pb2.Chunk.FromString,
                )
        self.DeleteModel = channel.unary_unary(
                '/remote_torch.ReferenceProtocol/DeleteModel',
                request_serializer=remote__torch__pb2.Reference.SerializeToString,
                response_deserializer=remote__torch__pb2.Empty.FromString,
                )
        self.DeleteBatch = channel.unary_unary(
                '/remote_torch.ReferenceProtocol/DeleteBatch',
                request_serializer=remote__torch__pb2.Reference.SerializeToString,
                response_deserializer=remote__torch__pb2.Empty.FromString,
                )
        self.Train = channel.unary_unary(
                '/remote_torch.ReferenceProtocol/Train',
                request_serializer=remote__torch__pb2.TrainConfig.SerializeToString,
                response_deserializer=remote__torch__pb2.Reference.FromString,
                )
        self.Predict = channel.unary_unary(
                '/remote_torch.ReferenceProtocol/Predict',
                request_serializer=remote__torch__pb2.PredictConfig.SerializeToString,
                response_deserializer=remote__torch__pb2.Reference.FromString,
                )
        self.Test = channel.unary_unary(
                '/remote_torch.ReferenceProtocol/Test',
                request_serializer=remote__torch__pb2.PredictConfig.SerializeToString,
                response_deserializer=remote__torch__pb2.Accuracy.FromString,
                )


class ReferenceProtocolServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendData(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendModel(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Fetch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Train(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Predict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Test(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReferenceProtocolServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendData': grpc.stream_unary_rpc_method_handler(
                    servicer.SendData,
                    request_deserializer=remote__torch__pb2.Chunk.FromString,
                    response_serializer=remote__torch__pb2.Reference.SerializeToString,
            ),
            'SendModel': grpc.stream_unary_rpc_method_handler(
                    servicer.SendModel,
                    request_deserializer=remote__torch__pb2.Chunk.FromString,
                    response_serializer=remote__torch__pb2.Reference.SerializeToString,
            ),
            'Fetch': grpc.unary_stream_rpc_method_handler(
                    servicer.Fetch,
                    request_deserializer=remote__torch__pb2.Reference.FromString,
                    response_serializer=remote__torch__pb2.Chunk.SerializeToString,
            ),
            'DeleteModel': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteModel,
                    request_deserializer=remote__torch__pb2.Reference.FromString,
                    response_serializer=remote__torch__pb2.Empty.SerializeToString,
            ),
            'DeleteBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteBatch,
                    request_deserializer=remote__torch__pb2.Reference.FromString,
                    response_serializer=remote__torch__pb2.Empty.SerializeToString,
            ),
            'Train': grpc.unary_unary_rpc_method_handler(
                    servicer.Train,
                    request_deserializer=remote__torch__pb2.TrainConfig.FromString,
                    response_serializer=remote__torch__pb2.Reference.SerializeToString,
            ),
            'Predict': grpc.unary_unary_rpc_method_handler(
                    servicer.Predict,
                    request_deserializer=remote__torch__pb2.PredictConfig.FromString,
                    response_serializer=remote__torch__pb2.Reference.SerializeToString,
            ),
            'Test': grpc.unary_unary_rpc_method_handler(
                    servicer.Test,
                    request_deserializer=remote__torch__pb2.PredictConfig.FromString,
                    response_serializer=remote__torch__pb2.Accuracy.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'remote_torch.ReferenceProtocol', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ReferenceProtocol(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendData(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/remote_torch.ReferenceProtocol/SendData',
            remote__torch__pb2.Chunk.SerializeToString,
            remote__torch__pb2.Reference.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendModel(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/remote_torch.ReferenceProtocol/SendModel',
            remote__torch__pb2.Chunk.SerializeToString,
            remote__torch__pb2.Reference.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Fetch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/remote_torch.ReferenceProtocol/Fetch',
            remote__torch__pb2.Reference.SerializeToString,
            remote__torch__pb2.Chunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/remote_torch.ReferenceProtocol/DeleteModel',
            remote__torch__pb2.Reference.SerializeToString,
            remote__torch__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/remote_torch.ReferenceProtocol/DeleteBatch',
            remote__torch__pb2.Reference.SerializeToString,
            remote__torch__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Train(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/remote_torch.ReferenceProtocol/Train',
            remote__torch__pb2.TrainConfig.SerializeToString,
            remote__torch__pb2.Reference.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Predict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/remote_torch.ReferenceProtocol/Predict',
            remote__torch__pb2.PredictConfig.SerializeToString,
            remote__torch__pb2.Reference.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Test(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/remote_torch.ReferenceProtocol/Test',
            remote__torch__pb2.PredictConfig.SerializeToString,
            remote__torch__pb2.Accuracy.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
